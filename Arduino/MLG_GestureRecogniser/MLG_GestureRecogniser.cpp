#include "MLG_GestureRecogniser.h"
#include <stdlib.h>
#include <math.h>

// Static configuration data.
// Weights for LSTM network recognising 8 gestures.
float parameters[] = { 
  -0.04225278f, -0.341273f, 0.01949793f, -0.1349077f, -0.4157154f, 0.03617049f, 0.5320898f, -0.4244025f, -0.07340006f, -0.003840326f, -0.2028833f, -0.3858708f, -0.1143612f, 0.1759853f, -0.374574f, -0.4749665f, 0.2171739f, 0.4823383f, -0.0145667f, 0.05049375f, -0.00363121f, 0.270513f, 0.3531373f, 0.1139992f, 0.3440199f, 0.2205348f, 0.3058959f, 0.08726972f, 0.8038849f, 0.02197956f, -0.02735843f, 0.05196281f, -0.1003132f, 0.304465f, -0.006679715f, -0.05177078f, -0.3482812f, 0.2512994f, -0.2634562f, 0.06951036f, 0.08828236f, 0.003979511f, -0.0699584f, 0.07372985f, 0.02351545f, 0.04454535f, 0.3721283f, 0.02802697f, 0.5840012f, 0.2911556f, 0.03071453f, -0.4477446f, 0.06945075f, 0.02837994f, 0.1847067f, -1.134819f, -0.1089103f, 0.9838674f, -0.2537391f, -0.2948861f, 0.1668879f, -0.7021012f, -0.2608414f, -0.05667089f, 0.04158491f, -0.05162725f, -0.1978807f, -0.1632936f, 0.1542012f, 0.1559451f, -0.03057571f, 0.2799035f, -0.7509371f, 0.04893905f, 0.1011883f, 0.03775565f, 0.04807809f, 0.1525711f, -0.1870784f, -0.628421f, 0.4693717f, -0.2383306f, -0.3108947f, -0.02597678f, 0.06143356f, 0.164779f, 0.1967233f, -0.001113997f, -0.1088898f, -0.4289734f, 0.4264981f, -0.1293313f, -0.2924028f, 0.2202706f, 0.01802353f, 0.6818421f, 0.02656142f, -0.05273439f, 0.05156838f, -0.05084499f, 0.1825626f, 0.7887943f, 0.2775422f, 0.5537249f, 0.01269856f, -0.07046206f, 0.1119153f, -0.1421951f, -0.1365669f, 0.1712121f, 0.4616278f, 0.05415263f, -0.3447649f, 0.303755f, -0.0614339f, -0.1373575f, -0.03864713f, -0.03504399f, -0.1853277f, 0.1476029f, -0.1638432f, -0.5337507f, -0.002872349f, 0.2367472f, -0.416559f, -0.3000165f, -0.2990443f, 0.1584841f, -0.2591036f, 0.006048211f, 0.01398429f, 0.1129586f, -0.2881521f, 0.01547398f, -0.6367841f, -0.2020727f, 0.009072645f, -0.2251742f, -0.04929341f, 0.06411798f, -0.0007298295f, 0.01784202f, -0.2643714f, -0.2320841f, -0.4950767f, 0.1129836f, -0.2015472f, -0.1531302f, -0.08135734f, 0.1942004f, 0.2289185f, -0.003660279f, -0.1009793f, -0.3124272f, -0.61454f, -0.2605272f, 0.1729731f, 0.09723575f, 0.06633229f, -0.2184737f, 0.4186714f, 0.1921054f, -0.03178212f, -0.07534727f, -0.02250226f, 1.104733f, -0.1043378f, 0.3180551f, 0.3118731f, -0.3121243f, 0.1961384f, 0.4999827f, -0.04237987f, -0.0166632f, 0.03245387f, -0.08907466f, 1.024888f, -0.31666f, -0.2151121f, 0.8816247f, -0.4413176f, 0.07444753f, -0.1632533f, 0.09711613f, 0.02588374f, 0.09892935f, -0.05006599f, 0.05792762f, 0.1721325f, 0.2316093f, 0.2151557f, 0.5890734f, 0.2639345f, 0.02810563f, -0.1945472f, -0.009382002f, 0.05371904f, 0.1848885f, 0.4730639f, -0.2697574f, 0.1064758f, -0.1651258f, -0.3659909f, -0.1314888f, 0.1313531f, -0.02790871f, -0.1922065f, -0.2739463f, 0.5192252f, -0.1213183f, 0.2660165f, -0.3449985f, -0.115956f, -0.13456f, 0.4139776f, -0.1873386f, -0.0180904f, 0.531646f, 0.1506561f, -0.5349914f, -0.2307441f, -0.3517093f, -0.09370394f, 0.2311552f, -0.2043239f, 0.5047696f, -0.2074705f, 0.03134233f, -0.04406826f, 0.1049526f, -0.1149651f, 0.1994979f, -0.24847f, -0.03319078f, 0.05678111f, 0.1759199f, 0.6831953f, 0.4342843f, -0.2468554f, -0.4159096f, 0.1742796f, 0.1027091f, 0.3209253f, 0.02386203f, 0.05254107f, 0.2040653f, 0.4254176f, 0.1787095f, 0.11295f, 0.3441335f, -0.1200646f, 0.1799251f, -0.2726731f, -0.244345f, -0.1043142f, 0.22792f, -0.3423418f, 0.396134f, 0.1139044f, -0.05501547f, -0.4082381f, -0.05705547f, 0.2655416f, 0.2679955f, -0.315139f, -0.09927861f, -0.1892461f, 0.5182461f, 0.3026469f, -0.1075397f, -0.2512853f, -0.0348557f, 0.3049651f, 0.6641521f, 0.4799687f, 0.1538148f, 0.274618f, -0.02418745f, 0.2655269f, -0.0860901f, 0.09039924f, 0.1675046f, -0.1116977f, 0.04892755f, 0.03936773f, -0.1651465f, -0.1551803f, -0.006892351f, -0.4614269f, -0.2522312f, -0.1552198f, -0.3390705f, -0.05378802f, 0.5201889f, 0.06753864f, -0.03330236f, -0.1552611f, -0.2192327f, -0.5243742f, 0.2236387f, -0.1005318f, -0.08212366f, -0.05186728f, -0.216838f, -0.552631f, 0.03212876f, 0.1777103f, -0.3572003f, 0.2658903f, 0.001715538f, 0.0571212f, 0.4358798f, 0.8355643f, 0.09488768f, 0.1681592f, 0.1572246f, -0.03208787f, -0.09012529f, -0.2366346f, 0.2061034f, 0.02539696f, -0.02380127f, 0.0419305f, 0.2094105f, 0.1448003f, 0.4928739f, -0.09898368f, -0.3877991f, -0.144165f, -0.4088027f, -0.1652443f, 0.4504371f, 0.05428572f, -0.4722f, -0.1644309f, -0.130308f, 0.3132634f, -0.07943909f, 0.005140228f, -0.03525838f, 0.1820672f, -0.1421062f, 0.1425016f, 0.3063264f, -0.04580327f, 0.09740812f, 0.07099044f, 0.3004044f, 0.1852739f, -0.1469533f, 0.3806947f, -0.2598962f, -0.2690017f, 0.237847f, 0.2807128f, -0.2112202f, 0.04806825f, -7.140881E-06f, 0.4645537f, -0.03329951f, -0.3184296f, -0.4912985f, 0.2234645f, 0.3483475f, -0.2927308f, -0.1617354f, 0.6750942f, 0.2967536f, 0.2406699f, 0.6134183f, 0.1711196f, -0.2448482f, -0.4227335f, 0.1774649f, 0.03589295f, -0.3615066f, -0.08320748f, 0.3682339f, -0.3048608f, 0.6227846f, -0.1912445f, -0.2079183f, 0.1652232f, 0.1239215f, -0.1439572f, 0.0906546f, -0.2414374f, 0.3216223f, 0.3058572f, -0.07544817f, 0.05709621f, -0.03854731f, -0.1652751f, -0.003196355f, 0.1731981f, -0.1214633f, 0.1470877f, 0.223848f, 0.08100247f, -0.4391421f, 0.0648481f, -0.298884f, 0.09841911f, 0.1302335f, -0.09988106f, 0.05488906f, -0.03800422f, 0.1404988f, 0.09528219f, 0.3109674f, 0.02426923f, -0.1115828f, 0.02705882f, 0.08117121f, -0.05043763f, -0.1897387f, -0.09062222f, 0.3228065f, -0.4470835f, -0.4917092f, -0.05195448f, 0.3032928f, 0.03026723f, -0.1958618f, -0.02679791f, 0.3173164f, 0.7074284f, -0.07475299f, -0.002617108f, -0.07828388f, 0.3150441f, 0.1651536f, 0.2836966f, 0.1218018f, 0.06177567f, -0.04252021f, -0.09424993f, 0.2769621f, 0.2936335f, -0.1846323f, -0.1972243f, 0.1575749f, 0.0673257f, 0.1713924f, 0.1662955f, 0.4049171f, 0.1626879f, 0.03188388f, 0.09058847f, 0.1466992f, 0.2229122f, -0.06151143f, 0.05467916f, 0.2763402f, 0.1695154f, -0.3574027f, 0.2621723f, 0.223634f, 0.01526692f, -0.1646823f, 0.1869566f, -0.09349581f, -0.1977505f, 0.4133143f, 0.4801562f, 0.203847f, -0.03248449f, -0.009374619f, -0.06980273f, -0.2753727f, -0.002476339f, 0.0134679f, -0.3514632f, -0.04474836f, -0.2323961f, -0.05400649f, 0.04055609f, 0.2855969f, -0.1943608f, -0.07901716f, -0.1187487f, -0.3043983f, 0.02427102f, 0.2080586f, -0.1948391f, -0.03954688f, -0.0176243f, -0.09608674f, -0.1186443f, -0.07724965f, -0.1789281f, -0.1492467f, -0.1545431f, -0.1975749f, 0.3047757f, -0.02290053f, 0.1030713f, 0.5132483f, -0.2958005f, -0.2019751f, -0.1677939f, 0.190665f, 0.2332937f, 0.2379899f, -0.05024547f, -0.1896159f, 0.1618956f, 0.2842819f, 0.423322f, 0.210832f, 0.08695882f, 0.04197834f, -0.2636823f, -0.04867711f, -0.1143988f, 0.1561334f, -0.1548609f, 0.09516902f, 0.07473767f, -0.09373828f, -0.4688803f, 0.1087811f, 0.1607542f, -0.03469116f, 0.5512875f, 0.4798858f, -0.01830539f, -0.2887425f, 0.2371323f, 0.08646146f, 0.4285153f, -0.4972813f, -0.3744339f, 0.2029821f, 0.3664285f, -0.2771835f, 0.06316144f, -0.6856787f, 0.6421877f, -0.2361234f, 0.02760617f, 0.2863435f, 0.04003802f, -0.1961749f, 0.1138781f, -0.04287393f, -0.3115582f, -0.03000053f, -0.2379388f, 0.240329f, 0.3285351f, 0.1104319f, -0.07209343f, -0.1275164f, -0.1122451f, -0.03099416f, 0.0255946f, 0.3086378f, -0.2450986f, 0.01464683f, -0.03375367f, 0.1950206f, 0.110353f, 0.1089178f, -0.2293322f, -0.03677567f, -0.2972461f, -0.02192438f, 0.1305486f, -0.2940018f, 0.1409071f, 0.004300945f, -0.1033475f, 0.0129781f, 0.002776139f, -0.07908602f, -0.1742035f, -0.1495349f, 0.1163829f, -0.2810363f, -0.1961166f, -0.1051901f, 0.1216698f, -0.1691415f, -0.04087571f, -0.5418993f, 0.01156353f, -0.1550524f, -0.1307121f, -0.2385523f, -0.09272753f, 0.1417996f, -0.1358145f, 0.1531874f, -0.1061046f, -0.4487544f, 0.1840376f, -0.1093032f, -0.1705298f, -0.02369126f, 0.03602988f, -0.4302996f, 0.203461f, -0.2419622f, 0.2255852f, 0.3691766f, -0.1372785f, -0.529324f, 0.2760273f, -0.09074982f, -0.3747098f, 0.0581484f, 0.2539499f, -0.1477855f, 0.04892705f, -0.1489719f, -0.2669914f, -0.08645052f, -0.0440182f, 0.3457417f, -0.3309624f, -0.405306f, 0.3363163f, -0.07088092f, 0.3203066f, -0.1071492f, 0.1150595f, 0.01231157f, -0.06255038f, 0.1888748f, -0.2405958f, -0.05384134f, 0.1094013f, -0.2283501f, 0.2618094f, -0.6465262f, 0.02045198f, -0.2811489f, -0.09022011f, 0.1698953f, -0.142122f, 0.3311982f, 0.0649735f, 0.2846069f, -0.2775716f, -0.5462922f, -0.4126924f, 0.1138665f, 0.2277352f, 0.0911453f, 0.4255335f, -0.2232391f, -0.2434564f, 0.02007035f, -0.2390801f, -0.3292424f, 0.1239514f, -0.1359438f, -0.038912f, 0.1084971f, 0.09673668f, -0.2370795f, -0.2139207f, 0.1189341f, -0.2099918f, 0.03459601f, 0.1477059f, -0.07761329f, -0.3898384f, -0.1458908f, 0.2384212f, -0.02103585f, 0.2635014f, 0.1059402f, -0.06049201f, 0.1417279f, 0.02868538f, 0.214321f, -0.267155f, -0.004412387f, -0.02825253f, -0.09945416f, -0.1917426f, 0.1450091f, 0.05447939f, -0.01154341f, -0.2007198f, -0.1019827f, -0.04108239f, -0.3666555f, -0.002227128f, 0.03444071f, -0.08365901f, -0.006567333f, 0.05847322f, 0.05299271f, -0.1175376f, 0.2840369f, -0.1647457f, 0.01296991f, -0.3349314f, -0.1194631f, 0.1919796f, 0.144677f, 0.08536646f, 0.449246f, 0.1007427f, -0.1923726f, -0.0256739f, 0.312201f, -0.09339534f, -0.205419f, -0.1007644f, 0.02045929f, -0.1445989f, 0.2486349f, 0.1009945f, -0.4319002f, 0.1591537f, 0.2055199f, -0.3588906f, 0.1543678f, -0.3487095f, -0.1360858f, -0.04762525f, -0.02863472f, 0.2100926f, 0.3044791f, -0.292806f, 0.05382927f, 0.1166625f, -0.03560112f, 0.02603275f, -0.5108933f, -0.02500344f, 0.06270105f, -0.09335471f, 0.1120573f, -0.06415527f, -0.2115461f, 0.1891549f, -0.1696999f, 0.04864526f, -0.08579929f, 0.1792897f, -0.1437206f, 0.1611143f, -0.2666932f, -0.1622954f, -0.08863276f, -0.006579866f, -0.2172033f, 0.1890152f, -0.05663486f, 0.1274279f, -0.1591544f, 0.002651877f, -0.1316348f, 0.01099839f, -0.1794228f, -0.02300488f, 0.1711554f, -0.1490966f, -0.2055712f, 0.1326012f, -0.3053259f, -0.008461938f, -0.1444322f, -0.08058894f, -0.08386145f, -0.02450847f, 0.2902899f, 0.410931f, -0.2334425f, -0.1178871f, 0.0571926f, 0.0761547f, -0.131283f, 0.347831f, 0.191558f, 0.06398687f, -0.06041092f, 0.1476855f, 0.02257438f, 0.181078f, 0.1315522f, 0.2652539f, -0.1603522f, -0.4349357f, -0.2417922f, 0.1311424f, -0.03449048f, -0.2661562f, -0.1910879f, -0.1488159f, -0.0208089f, -0.09586236f, -0.01961201f, -0.07602218f, -0.04635591f, -0.05930991f, -0.07566236f, -0.1204025f, 0.05815569f, -0.3465067f, -0.1958692f, -0.2573523f, -0.0130763f, 0.05598402f, 0.1325567f, 0.08796994f, -0.1018351f, -0.04100095f, -0.04894877f, 0.1639524f, -0.06880073f, -0.2358964f, 0.06977692f, 0.1152723f, -0.4119041f, 0.1059425f, -0.1342318f, -4.902697E-06f, 0.1760928f, -0.03211058f, 0.1167045f, 0.2237795f, 0.01268072f, -0.238102f, -0.04683483f, -0.03348113f, -0.4920433f, 0.1990546f, 0.1260452f, 0.4200846f, 0.1283624f, -0.01484352f, 0.1591529f, -0.1494365f, -0.5047237f, -0.1653493f, -0.2260524f, 0.2924089f, -0.5398502f, 0.0610007f, -0.04870179f, -0.08306693f, -0.1361158f, 0.2942819f, 0.1589226f, -0.2928176f, 0.008964492f, 0.2427028f, -0.0266832f, -0.1845191f, 0.1852585f, -0.1577123f, 0.3587561f, -0.1495446f, -0.2606463f, -0.089872f, -0.2002453f, 0.02366931f, -0.0328011f, 0.04261286f, -0.05468825f, -0.2922356f, -0.1166463f, 0.2867557f, 0.003362526f, -0.09270465f, -0.02689493f, -0.03060983f, -0.03900564f, -0.1366427f, 0.2183998f, -0.06813267f, 0.1023098f, 0.08935945f, 0.3535964f, 0.231678f, -0.02462387f, -0.1649804f, 0.05082008f, -0.07431173f, -0.2941904f, 0.224428f, 0.3029452f, 0.3199244f, -0.075842f, -0.03573617f, 0.1397584f, -0.04304829f, -0.1232108f, 0.1200148f, -0.2316713f, -0.148014f, -0.0660569f, 0.2382635f, -0.05155382f, -0.2273021f, 0.02387172f, 0.0845497f, -0.3002695f, 0.3698626f, 0.2735775f, -0.04122603f, -0.01725474f, -0.02768929f, -0.1927407f, -0.1499103f, 0.1038224f, -0.1730727f, -0.07077204f, 0.1579626f, -0.1735655f, 0.03763384f, -0.05315413f, -0.05003112f, 0.2566467f, 0.156087f, -0.3992121f, 0.02816003f, 0.05155453f, -0.02034378f, -0.03338023f, -0.1342172f, -0.1490911f, -0.1765603f, 0.1473187f, -0.0480002f, 0.1628472f, -0.2180721f, -0.06268087f, 0.169675f, -0.07015254f, -0.1211708f, -0.07309109f, 0.1061251f, -0.08764856f, -0.01524665f, -0.2364732f, 0.2034299f, -0.09576656f, 0.1785035f, -0.06297852f, -0.007335773f, 0.007061971f, 0.109832f, -0.0853802f, 0.1332046f, -0.03096756f, 0.06462172f, 0.1574235f, -0.1130646f, -0.05992174f, 0.0002452717f, -0.05344548f, 0.1487341f, 0.2195053f, 0.2546921f, -0.04349347f, -0.1125851f, 0.1548314f, -0.2346895f, 0.181133f, -0.09111688f, 0.1254289f, 0.02829319f, -0.2091472f, 0.3507068f, -0.09206761f, -0.2326651f, 0.0846318f, -0.03867418f, -0.05630496f, -0.001178025f, 0.01273329f, -0.2459112f, -0.1502483f, -0.00120985f, 0.1035388f, 0.05542808f, 0.2469505f, -0.2542114f, -0.1690205f, -0.1648741f, -0.1057809f, 0.07066747f, 0.1625218f, 0.0273886f, -0.04042723f, 0.2668698f, 0.05476723f, 0.1585661f, -0.2261543f, 0.3499792f, -0.2722722f, -0.1045983f, 0.2273868f, -0.194988f, 0.2696149f, 0.0218197f, -0.1489902f, 0.03529891f, 0.02373325f, 0.2090195f, -0.04958443f, -0.1275987f, 0.07753779f, 0.2228517f, 0.1214204f, -0.05364446f, -0.08289995f, 0.203882f, 0.3565719f, -0.1853722f, 0.1132791f, 0.216714f, 0.1925099f, 0.1011195f, -0.1480337f, -0.07919429f, 0.1773899f, -0.08576553f, -0.04473484f, -0.2512015f, -0.12321f, 0.06529327f, -0.2742794f, -0.103197f, -0.135418f, -0.1725885f, -0.02073294f, -0.1711595f, 0.1371803f, -0.1604511f, 0.1189316f, 0.03324305f, -0.0481693f, 0.01160042f, -0.03767402f, 0.1168861f, 0.08906448f, 0.1467285f, 0.1033802f, -0.1501593f, -0.06123552f, -0.1951276f, 0.2721866f, 0.2083246f, -0.04394651f, -0.00574051f, 0.08703476f, -0.03931042f, 0.3339047f, 0.02466271f, 0.07475473f, 0.1043337f, -0.002516528f, 0.3525097f, 0.1643897f, -0.3782126f, -0.0863059f, -0.02688506f, 0.07171747f, -0.03360108f, -0.3957484f, 0.2468104f, 0.2790188f, -0.02310636f, -0.0300373f, 0.09841121f, 0.313372f, -0.1300701f, 0.3002129f, 0.04495209f, 0.1470802f, -0.1321459f, 0.2478108f, 0.09110451f, 0.3970024f, 0.3671632f, 0.3594166f, 0.1219914f, 0.3574786f, 0.1516317f, 0.07434284f, 0.006115591f, 0.4188949f, 0.07756035f, 0.2640267f, 0.09368196f, 0.105455f, 0.3031872f, 0.2802533f, 0.3270171f, 0.02207576f, 0.1554386f, 0.2051581f, 0.382484f, -0.09299918f, 0.1936848f, 0.2116325f, -0.2328729f, -0.3421555f, -0.205907f, -0.2121526f, 0.09530772f, 0.0499246f, 0.2466529f, 0.2201513f, -0.2663965f, 0.2681887f, 0.2698925f, 0.594812f, -0.01045819f, -0.03830517f, 0.3001091f, 0.2168218f, -0.04944403f, 0.2031946f, -0.1659007f, -0.02582617f, 0.03243697f, -0.5377635f, -0.2645998f, 0.1513619f, -0.03636472f, 0.1671875f, -0.06392802f, 0.08734394f, 0.2417163f, -0.1275777f, -0.001877259f, -0.343031f, 0.04978528f, -0.2334077f, -0.07200385f, -0.03742557f, -0.04515224f, -0.1228827f, 0.06052383f, 0.1210651f, -0.05370114f, 0.04001597f, 0.2966585f, -0.1757524f, -0.1086465f, 0.2029409f, 0.09701316f, -0.03507605f, -0.05900136f, 0.02690624f, 0.3350734f, -0.1961246f, 0.4439419f, 0.03276325f, 0.7069723f, 0.7971566f, 0.172599f, -0.01824969f, -0.0659374f, -0.3750748f, -0.1843304f, -0.471067f, 0.1166145f, 0.2207884f, -0.05971905f, 0.03609565f, -0.02486705f, 0.0331484f, -0.1345918f, -0.04780512f, -0.2113179f, -0.1969135f, 0.09415697f, -0.1255775f, -0.2824761f, 0.01765104f, -0.07068923f, -0.1775939f, 0.1982101f, -0.1451983f, 0.04179062f, 0.06535059f, 0.1523654f, 0.09729745f, -0.01974829f, -0.1367596f, -0.2975601f, -0.0803709f, 0.2508224f, 0.04071615f, 0.115312f, 0.005686849f, -0.3990117f, 0.215638f, -0.04179844f, -0.1123252f, 0.02622023f, 0.2836459f, 0.3323208f, -0.301492f, -0.1489944f, 0.2706396f, 0.1132917f, -0.1698277f, 0.01782176f, -0.04944995f, 0.1400674f, -0.2536119f, 0.03380877f, -0.02048758f, 0.2465843f, 0.05359106f, -0.1377221f, 0.1307058f, 0.09710069f, -0.3004903f, -0.112006f, 0.164657f, -0.347308f, 0.1109247f, -0.04759773f, 0.1722704f, -0.126282f, -0.09884981f, 0.02127634f, 0.03925581f, 0.008721872f, 0.08377296f, 0.258247f, 0.2110423f, -0.1221149f, -0.01549789f, -0.05127097f, 0.01021432f, -0.02054709f, -0.06330364f, 0.08197524f, 0.02921029f, 0.2704345f, -0.09858128f, 0.2604361f, 0.05795649f, -0.004096531f, -0.2448391f, -0.1851167f, -0.01854339f, -0.08070304f, 0.2194235f, 0.1590815f, -0.06055499f, -0.1784422f, -0.3280554f, 0.2440482f, -0.1514902f, 0.4590133f, -0.07800678f, -0.1124824f, -0.1874453f, -0.1656907f, 0.07476305f, 0.2666029f, -0.09144446f, -0.1401769f, 0.3395944f, 0.01325916f, 0.1617585f, -0.2776209f, 0.05328143f, 0.04667338f, 0.06145195f, 0.08088967f, -0.513926f, -0.01676373f, -0.06693847f, -0.3576671f, 0.1681653f, 0.001206329f, -0.05786816f, 0.1708879f, -0.1221072f, -0.0200038f, 0.08857125f, 0.1959426f, -0.2117512f, -0.09709194f, 0.1814116f, 0.152823f, 0.3655917f, 0.07158579f, 0.1478808f, -0.2112705f, -0.0559091f, -0.2114013f, -0.05443742f, 0.1415669f, 0.0864111f, -0.05535679f, 0.1766858f, 0.09422462f, -0.1316726f, -0.07446879f, -0.1970731f, -0.1033869f, -0.2297302f, 0.2437808f, 0.06848378f, -0.05138489f, -0.152981f, -0.06013922f, -0.04972095f, 0.3395833f, -0.1059657f, 0.4282985f, 0.01899212f, -0.08788211f, -0.5356949f, 0.0058685f, 0.02587241f, 0.07135323f, -0.04210488f, -0.07988875f, -0.01223611f, 0.2909032f, -0.01361014f, 0.06667197f, 0.2044991f, 0.08449549f, 0.2185998f, -0.107105f, 0.2627944f, 0.2456405f, -0.07599483f, -0.0344882f, 0.1815306f, -0.2528842f, 0.4114967f, 0.3225788f, -0.2697057f, 0.1048072f, -0.2374594f, 0.1782384f, 0.02278608f, -0.1428709f, 0.1095537f, -0.1260786f, -0.01591812f, 0.09893819f, -0.1078858f, -0.04078892f, 0.2802559f, -0.225699f, -0.2771589f, -0.3073201f, -0.1138252f, -0.1079437f, 0.1625235f, -0.2118149f, -0.03586047f, 0.4063885f, -0.2297795f, 0.1726783f, -0.2941864f, 0.2128733f, 0.21291f, 0.04762191f, -0.2778304f, 0.1331801f, -0.3342297f, 0.07653867f, -0.3925295f, -0.3533612f, -0.2059178f, -0.01959446f, -0.3226418f, 0.06572212f, -0.04342487f, 0.4224457f, 0.1717286f, 0.03560412f, -0.002458449f, 0.292542f, -0.2854605f, 0.09252054f, -0.2042176f, -0.1327465f, -0.1243386f, 0.2704789f, 0.03546327f, -0.07421787f, -0.2089076f, -0.0342885f, 0.3551878f, 0.09660845f, -0.3246098f, 0.3119537f, -0.07481489f, -0.2191306f, -0.1296638f, -0.4422886f, 0.6961059f, 0.1526667f, 0.2915775f, -0.1527092f, 0.2950112f, -0.6899397f, -0.05802606f, 0.07718631f, -0.1474329f, -0.04983623f, 0.01294514f, -0.2730531f, 0.4780803f, -0.4218179f, -0.113418f, -0.05026386f, 0.3515688f, 0.3244814f, 0.0828096f, -0.3477004f, -0.01193451f, -0.3187647f, -0.1885766f, 0.07624814f, 0.3644013f, -0.1655825f, -0.2964945f, 0.0744727f, -0.1218055f, 0.03278433f, 0.1191265f, 0.09989573f, 0.09020557f, -0.05863568f, 0.2564982f, 0.2938876f, 0.02739558f, 0.09901448f, -0.08001634f, -0.3038783f, -0.2923487f, 0.03930227f, 0.204439f, 0.08569095f, -0.163978f, -0.1305281f, -0.1091157f, 0.2100824f, -0.308565f, -0.165589f, -0.07577829f, -0.4909917f, 0.1499492f, 0.04987127f, -0.3529741f, -0.1233419f, -0.02465489f, -0.3174642f, -0.1713779f, 0.2062963f, 0.4662713f, 0.04851653f, -0.1842117f, -0.005421949f, 0.1229627f, -0.01371117f, 0.158837f, -0.007532659f, -0.05597053f, -0.1254974f, 0.2521502f, 0.132819f, 0.02303697f, 0.03200651f, 0.02559087f, 0.3444009f, -0.1993364f, -0.06828695f, -0.3143882f, -0.02472926f, 0.1855955f, 0.1301328f, -0.335714f, 0.09147321f, -0.05217572f, 0.1635744f, -0.08184731f, -0.07838385f, 0.5120746f, 0.1486653f, -0.03565026f, 0.1086265f, 0.05846031f, 0.2302328f, -0.1619181f, 0.3286107f, 0.06265491f, 0.0286105f, 0.01205894f, -0.174872f, 0.02646713f, 0.1116498f, -0.07130285f, 0.01327188f, -0.1764722f, 0.01082591f, -0.01998284f, 0.1685822f, -0.2268971f, 0.003109345f, 0.05899653f, 0.08120336f, -0.1833185f, -0.1495372f, 0.5270278f, 0.1161952f, -0.4745452f, 0.3875351f, 0.08156872f, -0.2287114f, -0.05869456f, -0.01812053f, -0.02935054f, 0.1355741f, 0.005525499f, 0.08753865f, 0.2523172f, -0.2759531f, -0.006703051f, -0.3563901f, -0.113078f, 0.04355616f, 0.3739456f, -0.09554832f, -0.003468403f, 0.2078011f, -0.2067707f, -0.1235969f, -0.2077522f, 0.0255672f, -0.2848515f, -0.2216084f, -0.04122581f, -0.04524058f, -0.1848326f, -0.0667058f, -0.1127991f, 0.174572f, -0.2848417f, 0.08455162f, 0.09947066f, 0.1183197f, -0.2022211f, 0.03802353f, -0.1904162f, 0.07592162f, 0.0432231f, 0.1120537f, -0.178655f, -0.07851824f, 0.2568623f, 0.02857191f, 0.01959674f, -0.33604f, -0.02365692f, -0.04304457f, 0.3315955f, 0.1816279f, -0.1286913f, 0.02645888f, 0.02692062f, -0.3315571f, -0.09577503f, 0.1434672f, 0.1238296f, -0.0388076f, -0.2091301f, -0.08184398f, 0.2656691f, 0.1703175f, 0.1342781f, 0.1495361f, 0.1573983f, -0.2421492f, -0.1664423f, -0.7148913f, -0.02915524f, -0.2094419f, 0.241677f, 0.01372249f, -0.1562403f, 0.02557571f, -0.1310305f, -0.06090891f, -0.1227774f, -0.1289669f, 0.22326f, 0.5242827f, 0.3154498f, -0.1321264f, -0.1231961f, -0.03198243f, 0.1449549f, -0.04533226f, -0.02785833f, 0.2027296f, -0.3172249f, -0.04457432f, -0.01431589f, 0.07605441f, 0.1844473f, -0.2183502f, 0.09692279f, -0.1617988f, 0.1484982f, 0.1163821f, -0.06350829f, -0.08024137f, 0.1272079f, 0.05890362f, -0.07055789f, -0.07880035f, 0.04108429f, 0.07241834f, -0.4289061f, 0.07643964f, 0.07885332f, 0.21953f, -0.01112688f, -0.05379849f, 0.1502154f, -0.1864037f, -0.2003899f, 0.2650444f, 0.1394991f, 0.2879808f, 0.3830191f, 0.2262311f, 0.3028752f, 0.553556f, -0.1013774f, 0.2843842f, 0.1934286f, 0.06955883f, 0.283865f, 0.3803926f, 0.1088287f, 0.3742337f, 0.1506014f, 0.12496f, 0.1248303f, 0.1622542f, 0.2419749f, -0.1325355f, 0.4120924f, 0.249278f, -0.2049582f, 0.1911692f, 0.1070298f, -0.304602f, 0.05507293f, -0.01505679f, 0.2248628f, 0.1912584f, 0.2066092f, 0.06001522f, -0.2194435f, -0.2090494f, 0.01798737f, 0.06982683f, 0.5618199f, -0.102549f, -0.0068683f, 0.06512909f, 0.06860012f, 0.1245775f, 0.01919884f, -0.2433912f, -0.1244756f, 0.03242626f, -0.2098635f, 0.03945056f, -0.0812161f, -0.2799411f, 0.1034832f, -0.05285226f, 0.4184924f, -0.345752f, 0.1153766f, -0.03795779f, -0.4144367f, 0.01305031f, -0.06601518f, 0.1526463f, -0.1126017f, -0.1852393f, -0.142505f, 0.1782597f, -0.231551f, 0.08275659f, 0.1710451f, -0.2160959f, 0.08405654f, -0.1729461f, 0.09465493f, 0.2173269f, 0.113722f, 0.08965752f, -0.7784348f, 0.3603322f, -0.1394097f, -0.7474577f, 0.03468432f, 0.3183882f, 0.07724916f, -0.1544713f, 0.0006772753f, 0.09683323f, -0.2606943f, 0.1519506f, -0.452482f, -0.4215176f, 0.1810674f, -0.1062668f, 0.02074685f, 0.213606f, 0.1908854f, -0.1407364f, 0.04204973f, 0.03073469f, 0.02458339f, -0.1099768f, 0.05248264f, -0.2441153f, -0.2331962f, 0.0191869f, -0.344711f, -0.002654894f, 0.1904191f, -0.1406075f, -0.2262286f, 0.4204697f, 0.09308726f, -0.2780162f, 0.3326439f, 0.3350378f, 0.02310895f, 0.01462837f, 0.1516768f, -0.05056782f, -0.2785509f, -0.05579775f, 0.3667836f, -0.01159356f, 0.0110011f, -0.02032879f, -0.06552332f, -0.0160691f, -0.4801026f, -0.08186545f, 0.1222238f, -0.04049813f, -0.09690761f, 0.1372018f, 0.02365653f, -0.03814973f, 0.1995631f, -0.2054146f, -0.02831245f, 0.08561006f, -0.02739082f, 0.1938107f, 0.220123f, -0.03195907f, -0.3823252f, -0.0197681f, -0.0005868215f, -0.307749f, -0.02206668f, -0.02671174f, 0.07082656f, 0.02138656f, -0.1670592f, 0.01188926f, -0.2592626f, 0.006783598f, 0.1803832f, 0.197102f, 0.05760847f, -0.03542605f, -0.07760185f, -0.02920524f, 0.08483183f, 0.2068495f, -0.05565821f, 0.07284094f, -0.07463288f, 0.06773481f, -0.1299744f, 0.1238117f, -0.07301368f, -0.1447277f, -0.1797374f, -0.09717363f, 0.1113591f, 0.04430184f, -0.1007481f, 0.2832136f, 0.2008981f, 0.06977754f, 0.1682518f, 0.05350944f, -0.2242535f, 0.05372441f, 0.1480695f, -0.1365014f, 0.1339654f, -0.06160885f, 0.7029525f, -0.5125573f, -0.04028786f, 0.6356953f, -0.1843344f, 0.01828515f, -0.04953038f, -0.1030404f, -0.04337505f, 0.003968929f, -0.3581251f, -0.1278097f, -0.1507259f, 0.3309079f, -0.03503089f, -0.137767f, 0.09816291f, -0.418809f, 0.2022367f, -0.1761612f, 0.2360559f, 0.06515461f, -0.2321925f, -0.1128679f, 0.1184101f, -0.1148015f, -0.2576248f, 0.1440669f, -0.3912558f, -0.3366748f, -0.1675104f, 0.07320008f, -0.2292698f, -0.2775173f, -0.05763968f, 0.3826106f, -0.004202449f, 0.02304467f, -0.03384836f, 0.1251779f, -0.2990844f, 0.2388901f, 0.07331347f, -0.1821514f, 0.02347689f, 0.1946485f, 0.1222147f, 0.177404f, -0.1828089f, 0.1651169f, -0.09557591f, 0.07177432f, -0.1296046f, 0.4437644f, -0.08809756f, -0.1666242f, -0.2526873f, 0.0285427f, -0.3612647f, 0.02406937f, -0.01635306f, -0.1600827f, -0.05844091f, 0.43855f, -0.04608009f, -0.2605475f, -0.03775565f, 0.4048593f, 0.01384951f, -0.2496529f, -0.2050127f, 0.09252446f, -0.197221f, 0.03452029f, -0.02137748f, 0.03008552f, -0.05222619f, -0.2586177f, -0.2557527f, 0.4286821f, 0.1107299f, 0.1965021f, -0.1706673f, -0.09978774f, 0.03100092f, 0.1015596f, -0.1086348f, -0.1119622f, 0.2094953f, -0.2627197f, 0.06131623f, -0.3163922f, 0.1379856f, -0.04008521f, -0.3529833f, -0.4016373f, -0.1087287f, -0.08022057f, 0.2201779f, -0.2289665f, 0.1888687f, 0.06388371f, 0.1667826f, 0.2222596f, 0.2377922f, -0.092614f, -0.2817542f, 0.2855778f, -0.1386831f, 0.07087341f, -0.4423498f, -0.012772f, 0.08484605f, 0.02367811f, -0.08735726f, -0.2182868f, 0.1177272f, 0.1854718f, -0.2487557f, 0.01846974f, 0.1963667f, 0.3136424f, 0.1166376f, -0.1281268f, -0.3003488f, -0.04095431f, 0.1756894f, 0.2338137f, -0.03032105f, -0.09446679f, -0.0374487f, 0.4690366f, -0.3696734f, -0.3053599f, -0.01292298f, -0.04800411f, -0.09073823f, 0.2811641f, 0.09200188f, 0.1867671f, -0.07100273f, 0.07431943f, -0.197509f, 0.1007543f, 0.01212861f, -0.06300072f, -0.3183163f, 0.3300214f, 0.05128524f, 0.02945065f, 0.04357333f, -0.2209054f, 0.1391675f, 0.2530451f, -0.2726061f, 0.04128341f, -0.2587547f, 0.3674162f, -0.1544302f, -0.2382708f, -0.2495881f, -0.06187585f, -0.08049809f, -0.09568202f, 0.1420204f, 0.1468221f, -0.3136854f, 0.3874409f, 0.02506767f, -0.448927f, 0.202645f, -0.06954029f, -0.199408f, -0.1700857f, 0.008737753f, 0.3593172f, -0.1260261f, -0.3025532f, -0.1952474f, -0.367878f, -0.2886291f, -0.02236631f, -0.1614096f, 0.3034283f, 0.1445035f, -0.1105035f, 0.01642521f, -0.1069434f, -0.04083701f, 0.03766435f, -0.4881239f, -0.3193149f, -0.3555388f, 0.1807311f, -0.01799313f, -0.224642f, -0.324524f, -0.3124582f, -0.2229983f, 0.03933387f, -0.01042284f, -0.1769768f, -0.2329802f, -0.1052013f, 0.08506524f, -0.09977237f, -0.1417204f, 0.1372924f, -0.3537875f, 0.0560831f, -0.1985281f, 0.2080877f, -0.05124196f, -0.1743486f, 0.07564494f, 0.2014524f, -0.2309927f, -0.03290583f, -0.4646688f, 0.1185086f, 0.07898647f, -0.06924778f, -0.287258f, -0.01343071f, 0.143567f, 0.1590212f, 0.1409202f, -0.3288191f, 0.2945533f, 0.08033898f, -0.1700712f, -0.1339748f, 0.08332179f, 0.1841254f, -0.03880518f, 0.3598052f, 0.2937802f, 0.06799724f, -0.1249509f, 0.1694149f, 0.08903245f, 0.07840076f, 0.02952707f, 0.2324857f, 0.09070973f, 0.1203118f, -0.09063844f, 0.06525084f, -0.2547596f, -0.3014947f, 0.09546561f, 0.1229501f, -0.1931086f, 0.0584483f, 0.3770669f, 0.1126486f, -0.1481495f, 0.1403097f, 0.393933f, 0.02412547f, -0.0264495f, 0.06507093f, -0.02241763f, -0.09929853f, -0.187111f, 0.4753459f, -0.0007536953f, -0.1013403f, -0.06973044f, -0.03660762f, 0.09066218f, -0.1037888f, -0.0385919f, -0.1555188f, -0.147438f, 0.1426997f, -0.3171353f, -0.1197941f, -0.01021113f, 0.072563f, -0.03526251f, -0.1708404f, -0.164448f, 0.01503399f, 0.15174f, 0.1333036f, -0.1603716f, 0.1084648f, -0.2300045f, -0.1752838f, -0.3942603f, 0.09972601f, -0.03195619f, -0.1019765f, -0.07682621f, -0.03558063f, -0.1383006f, 0.04627091f, -0.2779293f, -0.2829433f, -0.04624987f, 0.3599591f, -0.165097f, -0.1223522f, -0.07610182f, 0.3200299f, 0.08704558f, 0.3472211f, -0.1018151f, 0.2904476f, 0.002720058f, 0.4127429f, 0.03483494f, -0.1158902f, -0.1309516f, 0.2415817f, 0.09546914f, 0.1686548f, -0.1151762f, 0.3060732f, -0.3583972f, -0.1220565f, -0.1605875f, -0.09404231f, -0.1670614f, -0.193139f, 0.02455012f, 0.1720468f, 0.1435473f, 0.2875124f, 0.1204353f, 0.01107073f, 0.0811192f, -0.0621312f, -0.3004197f, -0.08711128f, -0.02934454f, 0.328298f, 0.05667128f, 0.1187283f, 0.04149348f, -0.01277875f, -0.1171091f, -0.1926717f, 0.138496f, 0.2481185f, 0.1263266f, -0.0237072f, 0.006254482f, 0.09786882f, 0.2805918f, 0.0006139361f, 0.246621f, -0.2657798f, -0.07248613f, 0.2798356f, -0.05212409f, -0.3965822f, -0.0365917f, 0.6266484f, 0.5991197f, -0.2556611f, -0.2668054f, 0.4164996f, -0.161364f, 0.2661513f, 0.3592488f, 0.02932151f, 0.6238564f, -0.07023609f, -0.6429542f, -0.5649506f, -0.2869538f, 0.5888462f, 0.07190944f, 0.3554835f, 0.6058594f, 0.4945699f, 0.3982709f, 0.6068376f, 0.6546509f, 0.3078484f, 0.2483836f, 0.1926379f, 0.335084f, 0.2101164f, 0.09888448f, 0.3439174f, 0.2381928f, 0.2642567f, 0.01938242f, 0.5215371f, 0.0888709f, -0.3066891f, -0.1762252f, 0.4618441f, 0.4187628f, 0.4420769f, -1.61488f, 0.005275831f, -0.3018304f, 0.2538639f, 0.3287984f, -0.02972825f, 0.4286046f, 0.5461174f, -0.04155368f, 0.4457097f, -1.534058f, 0.985122f, 0.8440763f, -0.5378613f, -0.2679267f, -0.2001422f, -0.3822391f, 1.131852f, 0.5568784f, -0.8528116f, 1.206851f, 0.7895178f, -0.9837178f, -0.6431819f, -0.3352772f, 0.2958772f, -0.2282514f, 0.1985754f, 0.1034069f, 0.4970321f, -0.256748f, -0.003792142f, 1.584902f, 1.093892f, -0.2718333f, -0.3757518f, -0.3126246f, -0.9126247f, 0.1774098f, 0.2863161f, -0.279559f, 1.04839f, 0.02996893f, 0.5165458f, 0.04720987f, -0.503572f, 0.09059443f, 0.07975207f, 0.03563931f, 0.7756883f, -0.04071122f, -0.3181629f, -0.2482255f, 0.5740089f, 1.348821f, 0.2644906f, -0.7805406f, 0.01260135f, -0.7456751f, -0.4702268f, 0.9059867f, 0.01253556f, 0.8892375f, 0.3091559f, 0.1446154f, -0.9119247f, -0.006216799f, 0.2940808f, -0.715174f, 0.3439791f, -0.3859859f, 0.5774775f, 0.08788187f, -0.06763285f, 0.1226581f, -0.8302307f, 0.9658866f, 0.6416606f, -0.1606383f, -0.1568044f, 0.4666345f, -0.4499943f, 1.446935f, -0.005356533f, 0.3882902f, 0.5667635f, 0.5686564f, -0.7527438f, -0.8486822f, -1.022002f, -0.1675392f, 1.253416f, 0.9409356f, 0.1195673f, -0.006282005f, -0.08726531f, -0.146318f, 0.5513342f, 0.2904527f, 0.1938598f, 0.1749423f, 1.132632f, -0.8058746f, -1.53041f, -0.1998925f, 0.05708547f, 0.7834492f, -0.4241888f, 0.2561716f, -0.198603f, 0.333082f, -0.9337321f, 1.075809f, -0.3023616f, 0.02585368f, 0.1524168f, -0.3716693f, 0.09523779f, -0.1083298f, -1.493249f, 0.3288809f, -0.1959239f, 0.2103387f, -0.2041036f, -0.2915925f, 0.1700492f, 0.5368153f, 0.8974255f, -1.144866f, 0.9779392f, 0.660995f, -0.08549002f, -0.4769011f, -1.721837f, -0.1403167f, 0.314195f, 0.08229131f, -0.1729177f, -0.08781353f, 0.4524314f, -0.7602235f, -0.6037599f, 0.9083818f, -1.153528f, -0.5285714f, -0.8174367f, -0.4272792f, -0.6689532f, -0.7824169f, 0.4836812f, -0.2515889f, -0.05159336f, -0.4172269f, -0.4805186f, 0.3652385f, -0.005717586f, -0.3290799f, 2.351486f, -0.1019856f, 0.3142357f, 0.1147239f, -0.7024569f, -0.8157128f, -0.4499952f, -0.4949448f, -0.2199333f, 
  -100.0f // Control value to check for buffer overruns.
};

// Thresholds for a gesture being recognised.
// These have been calibrated to acheive ~2% FP rate on the 
// test data.
float thresholds[] = {
  0.6f,
  0.6f,
  0.7f,
  0.6f,
  0.6f,
  0.7f,
  0.6f,
  0.6f,
};

MLG_GestureRecogniser::MLG_GestureRecogniser(int samplesPerSecond)
  : _network(11, 18, GESTURE_COUNT + 1, parameters), 
    _xIntegral(), 
    _yIntegral(), 
    _zIntegral(), 
    _headingDifferential(),
    _pitchDifferential(),
    _rollDifferential() {
    _sampleNumber = 0;
    _recognisedGesture = 0;
    for (int i = 0; i < GESTURE_COUNT; i++) {
      _suppressedGestures[i] = false;
    }
    
    if (samplesPerSecond < 10) {
      // Enforce lower bound of 10Hz.
      samplesPerSecond = 10;
    }
    _sampleRate = (samplesPerSecond + 5) / 10;
    _averagingFactor = 1.0f / ((float)_sampleRate);
    _xLinearAccelerationAverage = 0.0f;
    _yLinearAccelerationAverage = 0.0f;
    _zLinearAccelerationAverage = 0.0f;
}

MLG_GestureRecogniser::~MLG_GestureRecogniser() {
}

int MLG_GestureRecogniser::getSampleRate() {
  return _sampleRate * 10;
}

void MLG_GestureRecogniser::process(sensor_sample* sample) {
  // Average x y and z accelerations between frames. This is so that our
  // integrals and our network doesn't miss any component of the acceleration.
  _xLinearAccelerationAverage += sample->linearAccelerationX * _averagingFactor;
  _yLinearAccelerationAverage += sample->linearAccelerationY * _averagingFactor;
  _zLinearAccelerationAverage += sample->linearAccelerationZ * _averagingFactor;

  if (_sampleNumber % _sampleRate == 0) {
    // Convert quaternion to Euler angles in z-x-y (yaw, pitch, roll) sequence. 
    // Avoids the ambiguity that would exist if the user provides the euler angles
    // to use, since there are many different formats of euler angles.
    float* inputs = _network.inputs();
    float wSquared = sample->quaternionW * sample->quaternionW;
    float xSquared = sample->quaternionX * sample->quaternionX;
    float ySquared = sample->quaternionY * sample->quaternionY;
    float zSquared = sample->quaternionZ * sample->quaternionZ;
    
    float roll = atan2(-2.0f * (sample->quaternionX * sample->quaternionZ - sample->quaternionW * sample->quaternionY), 
                        wSquared - xSquared - ySquared + zSquared);
    float pitch = asin(2.0f * (sample->quaternionY * sample->quaternionZ + sample->quaternionW * sample->quaternionX));
    float heading = atan2(-2.0f * (sample->quaternionX * sample->quaternionY - sample->quaternionW * sample->quaternionZ), 
                      wSquared - xSquared + ySquared - zSquared);
    
    inputs[0] = roll;
    inputs[1] = pitch;
    inputs[2] = _headingDifferential.getValue(heading);
    inputs[3] = _rollDifferential.getValue(roll);
    inputs[4] = _pitchDifferential.getValue(pitch);
  
    // Acceleration in meters per second per second.
    inputs[5] = _xLinearAccelerationAverage;
    inputs[6] = _yLinearAccelerationAverage;
    inputs[7] = _zLinearAccelerationAverage;

    // Integrals - approximate velocity, in meters per second.
    inputs[8] = _xIntegral.getValue(_xLinearAccelerationAverage);
    inputs[9] = _yIntegral.getValue(_yLinearAccelerationAverage);
    inputs[10] = _zIntegral.getValue(_zLinearAccelerationAverage);
  
    _network.feedForward();

    // Reset averages.
    _xLinearAccelerationAverage = 0.0f;
    _yLinearAccelerationAverage = 0.0f;
    _zLinearAccelerationAverage = 0.0f;

    float* outputs = _network.outputs();
    _recognisedGesture = 0;

    // Detect gesture once it hits the threshold, applying 
    // hysteresis so that the same gesture is not detected
    // again until it goes below the theshold.
    for (int i = 1; i < _network.outputSize(); i++) {
      int gestureIndex = i - 1;
      if (outputs[i] > thresholds[gestureIndex] 
          && !_suppressedGestures[gestureIndex]) {
        _recognisedGesture = i;
        _suppressedGestures[gestureIndex] = true;
      } else if (outputs[i] < thresholds[gestureIndex] * 0.75f) {
        _suppressedGestures[gestureIndex] = false;
      }
    }
  } else {
    // Clear any recognised gesture.
    _recognisedGesture = 0;
  }
  _sampleNumber = (_sampleNumber + 1) % _sampleRate;
}

bool MLG_GestureRecogniser::isGestureRecognised() {
  return _recognisedGesture > 0;
}

int MLG_GestureRecogniser::getRecognisedGesture() {
  return _recognisedGesture;
}

void MLG_GestureRecogniser::getRawGestureLikelihoods(float* likelihoods) {
  float* outputs = _network.outputs();
  for (int i = 0; i < _network.outputSize(); i++) {
    likelihoods[i] = outputs[i];    
  }
}

void MLG_GestureRecogniser::restart() {
  // Reset the LSTM network to clear all the cell states.
  _network.restart();
}

/*************************************
 * Implementation of preprocessing.
 *************************************/
 
 AccelerationIntegralPreprocessor::AccelerationIntegralPreprocessor() {
  _lastSum = 0.0f;
  _currentSum = 0.0f;
  _historyPos = 0;
  _integral = 0.0f;
  for (int i = 0; i < 50; i++) {
    _history[i] = 0.0f;
  }
}

AccelerationIntegralPreprocessor::~AccelerationIntegralPreprocessor() { 
}

float AccelerationIntegralPreprocessor::getValue(float input) {
  float meanCorrectedValue = input - ((_currentSum + _lastSum) / 50.0f);
  _integral = _integral * 0.95f + (meanCorrectedValue / 10.0f);

  // Update history and average.
  float valueRemoving = _history[_historyPos];
  _lastSum -= valueRemoving; 
  _currentSum += input;
  _history[_historyPos] = input;

  _historyPos++;
  if (_historyPos >= 50) {
    _historyPos = 0;
    
    // Avoid drift by rotating sums.
    _lastSum = _currentSum;
    _currentSum = 0.0f;
  }
  return _integral;  
}

AngleDifferentialPreprocessor::AngleDifferentialPreprocessor() {
  _historyPos = 0;
  _initialised = false;
  for (int i = 0; i < MLG_ANGLE_DIFFERENTIAL_STEPS; i++) {
    _history[i] = 0.0f;
  }
}

AngleDifferentialPreprocessor::~AngleDifferentialPreprocessor() {
}

float AngleDifferentialPreprocessor::getValue(float input) {
    if (!_initialised) {
      for (int i = 0; i < MLG_ANGLE_DIFFERENTIAL_STEPS; i++) {
        _history[i] = input;
      }
      _initialised = true;
      return 0.0f;
    }
  
    int nextPos = (_historyPos + 1) % MLG_ANGLE_DIFFERENTIAL_STEPS;
    float difference = input - _history[nextPos];
    if (difference > M_PI)
    {
        difference -= 2.0f * M_PI;
    }
    else if (difference < -M_PI)
    {
        difference += 2.0f * M_PI;
    }
    _history[nextPos] = input;
    _historyPos = nextPos;
    return difference;
}


/*************************************
 * Implementation of LSTM Network and component
 * layers.
 *************************************/
// Zeros all elements of the specified array.
void ArrayClear(float* data, int size) {
  for (int i = 0; i < size; i++) {
    data[i] = 0.0f;
  }
}

// Copies elements from the source array to the destination array.
void ArrayCopy(float* source, float* destination, int size) {
  for (int i = 0; i < size; i++) {
    destination[i] = source[i];
  }
}

// Sets the destination vector to be the dot product of the input and weight vector.
void SetDotProduct(float* inputs, float* weights, float* destination, int size) {
  for (int i = 0; i < size; i++) {
    destination[i] = inputs[i] * weights[i];
  }
}

// Adds the dot-product of the input and weight arrays to the destination array.
void AddDotProduct(float* inputs, float* weights, float* destination, int size) {
  for (int i = 0; i < size; i++) {
    destination[i] += inputs[i] * weights[i];
  }
}

// In-place applies a dot product of a vector with a given set of weights.
void ApplyDotProduct(float* destination, float* weights, int size) {
   for (int i = 0; i < size; i++) {
    destination[i] = destination[i] * weights[i];
  }
}

// Adds a weighted version of the input to the destination array.
// The weight array must have dimensions inputSize * outputSize and be indexed as (output * outputSize + input).
void AddWeightedInput(float* inputs, float* weights, float* destination, int inputSize, int outputSize) {
  for (int o = 0; o < outputSize; o++) {
    for (int i = 0; i < inputSize; i++) {
      destination[o] += weights[o * inputSize + i] * inputs[i];
    }
  }
}

// Applies the layer activation function in-place to the given weighted sum.
// This is 4 * sigmoid(weightedInput - 2.0.
void ApplyLayerActivationFunction(float* outputs, int outputSize) {
  for (int i = 0; i < outputSize; i++) {
    float weightedSum = outputs[i];
    if (weightedSum > 0.0f) {
       outputs[i] = (4.0f / (1.0f + (float)exp(-weightedSum))) - 2.0f;
    } else {
       outputs[i] = 2.0f - (4.0f / (1.0f + (float)exp(weightedSum)));
    }
  }
}


// Applies the gate function in-place to the given weighted sum.
// This is the normal sigmoid function.
void ApplyGateActivationFunction(float* outputs, int outputSize) {
  for (int i = 0; i < outputSize; i++) {
    float weightedSum = outputs[i];
    if (weightedSum > 0.0f) {
       outputs[i] = (1.0f / (1.0f + (float)exp(-weightedSum)));
    } else {
       outputs[i] = 1.0f - (1.0f / (1.0f + (float)exp(weightedSum)));
    }
  }
}

// Applies the layer activation function to the given weighted inputs, storing
// the result in the output array.
// This is 4 * sigmoid(weightedInput) - 2.0.
void LayerActivationFunction(float* weightedInputs, float* outputs, int outputSize) {
  for (int i = 0; i < outputSize; i++) {
    float weightedSum = weightedInputs[i];
    if (weightedSum > 0.0f) {
       outputs[i] = (4.0f / (1.0f + (float)exp(-weightedSum))) - 2.0f;
    } else {
       outputs[i] = 2.0f - (4.0f / (1.0f + (float)exp(weightedSum)));
    }
  }
}

LSTMGate::LSTMGate(int inputSize, int outputSize, float** parameters) {
  _inputSize = inputSize;
  _outputSize = outputSize;
  
  _inputWeights = *parameters;
  *parameters += inputSize * outputSize;
  
  _temporalWeights = *parameters;
  *parameters += outputSize * outputSize;
  
  _cellWeights = *parameters;
  *parameters += outputSize;
  
  _biases = *parameters; 
  *parameters += outputSize;
}

LSTMGate::~LSTMGate() {
  // Do any clean-up in here.
}

void LSTMGate::feedForward(LSTMGateState* state) {
  ArrayCopy(_biases, state->_outputs, _outputSize);
  AddDotProduct(state->_cellStates, _cellWeights, state->_outputs, _outputSize);

  AddWeightedInput(state->_inputs, _inputWeights, state->_outputs, _inputSize, _outputSize);
  AddWeightedInput(state->_lastCellOutputs, _temporalWeights, state->_outputs, _outputSize, _outputSize);

  ApplyGateActivationFunction(state->_outputs, _outputSize);
}

LSTMGateState::LSTMGateState(int inputSize, int outputSize, float* inputs, float* lastCellOutputs, float* cellStates) {
  _inputSize = inputSize;
  _outputSize = outputSize;
  _inputs = inputs;
  _cellStates = cellStates;
  _lastCellOutputs = lastCellOutputs;
  _outputs = new float[outputSize];
}

LSTMGateState::~LSTMGateState() {
  delete[] _outputs;
}


LSTMLayer::LSTMLayer(int inputSize, int outputSize, float** parameters) {
  _inputSize = inputSize;
  _outputSize = outputSize;

  _inputWeights = *parameters;
  *parameters += inputSize * outputSize;

  _temporalWeights = *parameters;
  *parameters += outputSize * outputSize;

  _biases = *parameters;
  *parameters += outputSize;

  _inputGate = new LSTMGate(inputSize, outputSize, parameters);
  _forgetGate = new LSTMGate(inputSize, outputSize, parameters);
  _outputGate = new LSTMGate(inputSize, outputSize, parameters);
}

void LSTMLayer::feedForward(LSTMLayerState* state) {
  _inputGate->feedForward(state->_inputGate);
  _forgetGate->feedForward(state->_forgetGate);

  // Calculate input into cell state.
  ArrayCopy(_biases, state->_outputs, _outputSize);
  AddWeightedInput(state->_inputs, _inputWeights, state->_outputs, _inputSize, _outputSize);
  AddWeightedInput(state->_lastCellOutputs, _temporalWeights, state->_outputs, _outputSize, _outputSize);
  
  ApplyLayerActivationFunction(state->_outputs, _outputSize);
  ApplyDotProduct(state->_cellStates, state->_forgetGate->_outputs, _outputSize);
  AddDotProduct(state->_outputs, state->_inputGate->_outputs, state->_cellStates, _outputSize);
  
  _outputGate->feedForward(state->_outputGate);
  LayerActivationFunction(state->_cellStates, state->_outputs, _outputSize);
  ApplyDotProduct(state->_outputs, state->_outputGate->_outputs, _outputSize);

  for (int i = 0; i < _outputSize; i++) {
    state->_lastCellOutputs[i] = state->_outputs[i];
  }
}

LSTMLayer::~LSTMLayer() {
}

LSTMLayerState::LSTMLayerState(int inputSize, int outputSize, float* inputs, float* outputs) {
  _inputSize = inputSize;
  _outputSize = outputSize;
  _inputs = inputs;
  _outputs = outputs;
  _cellStates = new float[outputSize];
  _lastCellOutputs = new float[outputSize];
  ArrayClear(_cellStates, outputSize);
  ArrayClear(_lastCellOutputs, outputSize);
  
  _inputGate = new LSTMGateState(inputSize, outputSize, inputs, _lastCellOutputs, _cellStates);
  _forgetGate = new LSTMGateState(inputSize, outputSize, inputs, _lastCellOutputs, _cellStates);
  _outputGate = new LSTMGateState(inputSize, outputSize, inputs, _lastCellOutputs, _cellStates);
}

LSTMLayerState::~LSTMLayerState() {
  delete[] _cellStates;
  delete[] _lastCellOutputs;
  delete _inputGate;
  delete _forgetGate;
  delete _outputGate;
}

SoftmaxLayer::SoftmaxLayer(int inputSize, int outputSize, float** parameters) {
  _inputSize = inputSize;
  _outputSize = outputSize;

  _inputWeights = *parameters;
  *parameters += inputSize * outputSize;

  _biases = *parameters;
  *parameters += outputSize;
  
//  _inputWeights = new float[inputSize * outputSize];
//  _biases = new float[outputSize];
}

SoftmaxLayer::~SoftmaxLayer() {
  delete[] _inputWeights;
  delete[] _biases;
}

void SoftmaxLayer::feedForward(SoftmaxLayerState* state) {
  ArrayCopy(_biases, state->_outputs, _outputSize);
  AddWeightedInput(state->_inputs, _inputWeights, state->_outputs, _inputSize, _outputSize);

  // Apply softmax activation function.
  float sum = 0.0f;
  for (int i = 0; i < _outputSize; i++) {
    float exponentialOutput = exp(state->_outputs[i]);
    sum += exponentialOutput;
    state->_outputs[i] = exponentialOutput;
  }
  // Normalise to one.
  for (int i = 0; i < _outputSize; i++) {
    state->_outputs[i] /= sum;
  }
}

SoftmaxLayerState::SoftmaxLayerState(int inputSize, int outputSize, float* inputs, float* outputs) {
  _inputSize = inputSize;
  _outputSize = outputSize;
  _inputs = inputs;
  _outputs = outputs;
}

SoftmaxLayerState::~SoftmaxLayerState() {
  // No clean-up to do.
}

LSTMNetwork::LSTMNetwork(int inputSize, int hiddenSize, int outputSize, float* parameters) {
  _inputSize = inputSize;
  _hiddenSize = hiddenSize;
  _outputSize = outputSize;
  _inputs = new float[inputSize];
  _hiddenStates = new float[hiddenSize];
  _outputs = new float[outputSize];
  _hiddenLayer = new LSTMLayer(inputSize, hiddenSize, &parameters);
  _hiddenLayerState = new LSTMLayerState(inputSize, hiddenSize, _inputs, _hiddenStates);
  _outputLayer = new SoftmaxLayer(hiddenSize, outputSize, &parameters);
  _outputLayerState = new SoftmaxLayerState(hiddenSize, outputSize, _hiddenStates, _outputs);
  _loadedSuccessfully = (*parameters == -100.0f);  
}

LSTMNetwork::~LSTMNetwork() {
  delete[] _inputs;
  delete[] _hiddenStates;
  delete[] _outputs;
  delete _hiddenLayer;
  delete _hiddenLayerState;
  delete _outputLayer;
  delete _outputLayerState;
}

int LSTMNetwork::inputSize() {
  return _inputSize;
}

int LSTMNetwork::outputSize() {
  return _outputSize;
}

float* LSTMNetwork::inputs() {
  return _inputs;
}

float* LSTMNetwork::outputs() {
  return _outputs;
}

bool LSTMNetwork::hasLoadedSuccessfully() {
  return _loadedSuccessfully;
}

void LSTMNetwork::feedForward() {
  _hiddenLayer->feedForward(_hiddenLayerState);
  _outputLayer->feedForward(_outputLayerState); 
}

void LSTMNetwork::restart() {
  // Clear all time-series Neural Network state.
  for (int i = 0; i < _hiddenLayerState->_outputSize; i++) {
    _hiddenLayerState->_cellStates[i] = 0.0f;
    _hiddenLayerState->_lastCellOutputs[i] = 0.0f;
  }
}



