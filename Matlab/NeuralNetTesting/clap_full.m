function [Y,Xf,Af] = clapfunction(X,Xi,~)
%CLAPFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 02-Sep-2016 13:15:50.
%
% COLUMNS USED: trunc = data(2:end, [2:14 23:28]);
%   (remove header row because for some reason it didn't do that when I
%   imported it, then cull the Timestamp, TemperatureInCelcius,
%   SystemCalibration, GyroCalibration, AccelerometerCalibration, 
%   MagnotometerCalibration, BatteryLevel, Received, Skipped, GestureName,
%   and Bad columns)
% 
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 19xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 1xQ matrix, input #2 at timestep ts.
%
%   Xi = 2x2 cell 2, initial 2 input delay states.
%   Each Xi{1,ts} = 19xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 1xQ matrix, initial states for input #2.
%
%   Ai = 2x0 cell 2, initial 2 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 2x2 cell 2, final 2 input delay states.
%   Each Xf{1,ts} = 19xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 1xQ matrix, final states for input #2.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [73.3125;-40.3125;-117.9375;-0.43157958984375;-0.53643798828125;-0.8411865234375;-0.996826171875;-20.95;-11.29;-13.94;-6.34;-7.5;-4.25;-1.47908359837869;-0.917462318473832;-1.17339449275467;-121.5625;-115.4375;-130.125];
x1_step1_gain = [0.0104302477183833;0.0203432930705658;0.0108035111411209;1.6492022749006;2.19934223773408;1.77268055179876;3.7991884057971;0.0713521227256511;0.0642054574638844;0.0417362270450751;0.136425648021828;0.117164616285882;0.142348754448399;0.773801921752581;0.801850739093615;0.99522978544467;0.00916905444126074;0.00890125173852573;0.00812388931200812];
x1_step1_ymin = -1;

% Input 2
x2_step1_xoffset = 0;
x2_step1_gain = 2;
x2_step1_ymin = -1;

% Layer 1
b1 = [1.5840774471336754;-1.1876638786341283;-0.75749718041694125;-0.36699296962482836;-0.049654370870835796;0.26722145564368788;-0.43768193906986047;0.81356534535046587;1.1487384831690148;1.375234945931278];
IW1_1 = [-0.08267410796594836 -0.28272601416523779 -0.1783221321279311 -0.050425992625695026 -0.2368759723981127 0.28622013264981666 0.18155958100863048 0.012147786325636525 -0.34433260348516892 -0.25933053162539998 -0.21202785313134528 -0.21192944305321221 0.041400618831988222 0.1559850514437193 -0.29247778610096004 0.21856625313307274 0.02649202759279504 0.23320743503859759 0.17083765523599914 -0.272913153597307 0.25131047735881057 -0.084047446946759363 0.22230110204690606 -0.066511534451376489 -0.3318210035897457 -0.36560437297000831 -0.28572801734786257 -0.11213982114002986 0.094135162305097969 0.10431259912201456 0.44237571289162847 0.27330889441508466 0.10312546302802492 -0.17597431350953321 -0.25358060467896915 -0.16887418383945588 0.1507594624180614 -0.29524021406125012;0.30667879755802147 0.11742028174638078 0.19500705439753488 -0.23576660805451638 0.29308971099591713 -0.13504546710875848 -0.3041479747711458 -0.056691351458550962 0.047214725674253215 -0.24440388517032388 -0.28219716112704818 -0.18434018076006414 -0.20061155900259064 -0.1902512189945941 -0.10183471087658279 0.22743146038452774 0.41606875976249619 -0.31467394475087462 0.14197840888506544 -0.31737215743510722 0.16385247184246149 0.39329682995323972 -0.1099697927535775 -0.21878591764065733 0.32766534850374907 -0.10571085929686484 0.28327556841435431 -0.13601276880727398 0.38440637688996832 0.11723274126872051 -0.11778110555582977 -0.31106524100286542 0.088908716866528334 -0.25611752611220923 -0.074502256924978028 0.49731859988405608 -0.1524702261349592 0.057784099456649793;0.03245249499712817 -0.34241567398932099 0.304178027799613 -0.086699004798997475 -0.17257775653757768 0.0021015603092443417 -0.012113743180220092 0.13109055894003524 -0.0065270158843957135 -0.25497221513574209 -0.36084226478826209 -0.0776048028136333 0.057758502899050865 -0.20409410857862215 -0.39780873920474719 -0.35995430368851439 0.03245139145313209 -0.030126432856204539 0.23552218848624007 0.015286243434069181 0.23636732851761988 -0.28992856531596684 0.49849703051503369 0.23257285839947847 0.15263546786018592 -0.031520240106675319 -0.29348156657544383 -0.44796012197170776 0.1400972085475482 0.036409755402132524 0.31518767069050302 0.10980617071629273 -0.18306621931790906 -0.25267269274899495 -0.2804844551584596 0.21959104998026746 0.2975923815364091 0.31243156603374522;0.15435669317350131 -0.26137323054786449 0.18899324462692377 0.23219462483932479 -0.12971333783175387 0.2259567151548795 0.30083924764157255 -0.29947308655656474 0.29529107143864275 -0.31554514347032142 0.40141168815130368 -0.18234408376950706 0.19864448458691816 0.084838539619515457 0.097714665557687347 0.082929152882302071 0.15593850987791572 -0.3518293159407771 -0.28067495737589454 0.089805119792907492 0.08452639496311791 0.0025139977909634128 0.2033641997669112 -0.21710367971856798 0.026039399903718688 0.29903740573730569 0.1756732465885566 -0.27727236620857809 -0.20615361885908831 0.096028203392831274 0.14977694186369636 0.24998733316652005 0.2530575705500846 -0.31950656497632124 -0.042254673904950545 0.010572045430685573 -0.5342037792650004 0.0059565449335724835;-0.48561351439178474 -0.020100353422354875 -0.26590193167131604 -0.25348195107053889 -0.025389775355241548 0.01764392629715102 -0.26834983765674525 -0.22406775367785225 -0.076542775555104928 -0.081003302118425602 0.15155861249821762 0.14084504551435098 -0.19569224764693191 0.084996947461636913 -0.022520875659186826 -0.17328824620385674 -0.15712807769559492 -0.27518035365465582 0.20842527658139443 0.1766364001659978 -0.11469520233001847 0.14441598609423661 0.010046495271271083 -0.27183705610801673 0.34665250430209193 0.29564219204502862 0.24027047585772712 0.23531179017242557 -0.050388237168306774 -0.050461894752117917 -0.079999316631808509 0.022084772084823883 -0.013953616750611138 -0.059138984710008023 0.22545465912375665 0.34250413560667925 -0.02192621003244398 -0.15099474336131233;-0.44688186761629844 -0.17042223305101389 -0.16955135520403389 -0.083905679768300406 -0.012673838930028717 0.17784926772453241 0.22245770561825379 0.07208624615315895 -0.094453480677137533 -0.28509241200181423 -0.0069022158352892733 -0.11874862228229899 0.18223572535769778 -0.051445238537452712 0.23286583670240241 -0.28170989755867087 0.34107145242148007 -0.022450690586513833 0.26868633528170932 -0.020419662516825535 0.33339991427562921 -0.10677645440629055 -0.24336358284112225 0.2260788058252417 -0.065378917421699032 -0.42781540738863721 -0.17699577569196884 0.4087707320915826 -0.1446677339580357 -0.048129587146424936 -0.30962549333797301 -0.26466278117136738 -0.33693295561853531 -0.49032386730690647 0.024241362552190684 -0.23988476251209553 0.12863662942066448 0.065754519303143202;-0.35503846771164549 0.17606540617279676 -0.16864735833291228 0.0347719364640139 -0.3656172301816405 0.15817349957549942 -0.14513514562612301 0.17909741009717395 0.068820417632997677 -0.2493842715935698 -0.11362586488874353 0.5123023253900667 -0.16850670355132952 0.30827099568881416 -0.045135529934963663 -0.33253084299268298 -0.068518351359354412 -0.16013693934320833 0.00073762232612213565 -0.06817843246137649 -0.0063111494872766837 -0.36671811434894613 0.38658344786997328 -0.13860466029215504 0.033726562154186915 -0.027517380591063442 0.33766440183253177 -0.1808163640144656 -0.20231076229583966 -0.31394184117828489 -0.23165123620713077 -0.092390890223613839 0.38588409978489169 -0.4013032127593697 -0.32810425474716964 -0.19306702901318928 0.20183389334550073 -0.19208054543714381;0.2416254271139589 0.24044037238977284 0.18823176578592585 -0.16973737139849362 -0.10432654959413928 -0.088567110681197991 0.053649019518528976 -0.32733754440746637 -0.082337517449647707 0.21470744718632756 -0.31222696761513369 -0.24730217601570206 -0.14664527986077172 -0.17687464868077521 -0.13409064321062122 0.40550213771128851 0.36154453378238816 -0.29834455202526561 -0.16865876945872746 -0.15237470452810581 -0.40767450101736941 -0.39351863896089107 -0.13684120020473614 0.20057971993084658 0.039912072324524255 -0.15396196732887196 0.28984273146991568 0.14136796932954968 0.12183011513142716 0.18105793331009112 -0.34499818034947793 0.063898447597555835 0.12829702381700286 0.12226057999915013 0.046875736795371964 0.56122073053115284 -0.13713145081033357 0.075762038287150807;0.35338827669985451 -0.095135458542302181 0.079925195786007583 0.11549947221973711 -0.14853928133856686 0.098557656919647907 -0.38784477776860532 -0.2540391361816462 -0.33564873888576741 0.077252563815082151 -0.066529100508137373 0.1717980736936866 0.19606856351503421 -0.22855178290827094 0.12355282617033042 -0.33347521523114532 -0.15783996406416612 -0.16897072967719279 -0.11219993060045824 0.25966378757608533 0.12013118524713959 -0.068518709986523652 0.33335416836061782 0.062934154322628888 -0.0037626912788824452 0.24071110929480927 0.13364777610646938 0.41072002186139361 -0.080063249883592091 0.21949399538721451 0.25653749661562114 0.08997696843140314 0.16730771591692023 0.13331267237617672 -0.40501132171461673 0.45890710093121129 0.22174946677534008 0.026019488523919269;0.1073812497972999 0.11005389804153974 0.28041643362981428 0.039409340783291932 -0.21057221364664636 -0.27310385851762214 0.14644745214408963 -0.35732016161935215 -0.27167522455942927 0.069341600074273438 0.29710602649792595 -0.32395026944118011 0.1141208143773651 -0.15954681490485503 0.096043638833694614 -0.39804789201070223 0.28876208928689462 -0.40364807838703387 0.3203507168503944 -0.19588411700391661 0.032942779049510554 -0.2001581701638534 -0.16595969200656119 0.20896626337750157 -0.13909408571743592 0.3845950500979759 -0.35212281911005056 0.34893682177972857 -0.0069680977651350373 -0.200092924297852 0.17559631389350217 -0.16902305085928102 -0.17824625829218346 -0.26399357878895285 -0.12618712290972514 0.25542316493743655 0.24655690218342019 0.094437662000620468];
IW1_2 = [0.082810940930600971 -0.44439224990998966;0.30151516896179659 0.24071656921186158;0.31478302029478689 0.076230612397277242;0.041335772816271356 0.32516486429395025;1.1788467342801072 0.0097980832220421823;-0.70900449585675251 -0.27598845675548372;-0.43683022610820349 -0.19831391052531441;-0.8559750991641395 0.090053199321652358;0.26346978693885897 -0.23035936618249472;-0.42838949890239558 0.20875034946226595];

% Layer 2
b2 = -0.2742784512054649;
LW2_1 = [0.26856532190792326 -0.13129650006445309 0.078314293014934339 -0.031597932794989993 0.70401641017727001 -0.30693866790077318 -0.083113251982440822 -0.21107308471045924 0.079886246815900314 -0.08871259055107153];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 2;
y1_step1_xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,3);
for ts=1:2
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
end

% Input 2 Delay States
Xd2 = cell(1,3);
for ts=1:2
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1_gain,x2_step1_xoffset,x2_step1_ymin);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1_gain,x2_step1_xoffset,x2_step1_ymin);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2]-1,3)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2]-1,3)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
